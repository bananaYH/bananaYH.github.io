<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>蓝桥杯复习</title>
      <link href="2021/04/18/lan-qiao-bei-fu-xi/"/>
      <url>2021/04/18/lan-qiao-bei-fu-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="蓝桥杯复习"><a href="#蓝桥杯复习" class="headerlink" title="蓝桥杯复习"></a>蓝桥杯复习</h1><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例：</p><ul><li>输入值<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> b <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> c <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>输入字符串<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>in.next() 从缓冲区接收字符遇到空格后停止。<br>in.nextLine() 从缓冲区接收字符，并且接收空格，遇到换行才停止，并且会自动舍弃换行。</p></blockquote></li></ul><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><h2 id="常用的几种方式："><a href="#常用的几种方式：" class="headerlink" title="常用的几种方式："></a>常用的几种方式：</h2>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//仅输出变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出变量后会自动换行</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//格式化输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>例：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%9.2f"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"9.2"中的9表示输出的长度，2表示小数点后的位数</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%o"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"o"表示输出八进制整数</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"x"表示输出十六进制整数</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"d"表示输出字符串</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%08"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出位数为8的整数，不足前面补0(适合二进制格式)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="数组常用类–Arrays工具类"><a href="#数组常用类–Arrays工具类" class="headerlink" title="数组常用类–Arrays工具类"></a>数组常用类–Arrays工具类</h3><p>Arrays类位于util包中<br>该工具类主要针对的是数组的操作<br>例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span> <span class="token comment">//需要将Arrays导入</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取指定值的下标(二分查找)</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//按升序进行排序</span><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回数组字符串形式</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[1, 2, 3, 5, 6]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ul><li>字符串一旦创建就不可再改变(可重新指向)</li><li>为了提升字符串的访问效率，程序中使用了“缓存”技术<br>因此在java中所有使用“双引号”括起来的字符串都会在“字符串常量池”中创建，字符串常量池在<strong>方法区</strong>中被储存(两个相同字符串在字符串常量池中保存的是相同地址)</li></ul><h3 id="String常用方法"><a href="#String常用方法" class="headerlink" title="String常用方法"></a>String常用方法</h3><p>String类位于lang包中，无需导入<br>以下String指的是需要操作的String类型变量</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">chatAt</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//返回一个指定位置的char值</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//判断一个字符串是否以endstr(字符串)结尾</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//判断对象(字符串)之间是否相等</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//判断字符串之间是否相等，不考虑大小写</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//返回指定字符串str在此字符串中第一次出现的索引，返回int值</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//返回指定字符串str在此字符串中最后一次出现的索引，返回int值</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//返回字符串长度，返回int值</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span><span class="token class-name">String</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//在String中将所有的s1字符串替换为s2字符串，返回String值</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">replaceFirst</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span><span class="token class-name">String</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//只替换第一个子字符串，返回String值</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//根据str字符串拆分String，返回String[]数组</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//将String转换为大写，返回String值</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//将String转换为小写，返回String值</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//将String转换为char数组，返回char[]数组</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//去除String前后空白，返回String值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用toCharArray-增强for遍历String字符串"><a href="#使用toCharArray-增强for遍历String字符串" class="headerlink" title="使用toCharArray()+增强for遍历String字符串"></a>使用toCharArray()+增强for遍历String字符串</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> a<span class="token operator">:</span>s2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//12345</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="竞赛常用类"><a href="#竞赛常用类" class="headerlink" title="竞赛常用类"></a>竞赛常用类</h2><h3 id="大数类"><a href="#大数类" class="headerlink" title="大数类"></a>大数类</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li>大数类位于java.math.*包中，其理论上可以储存无限位的大数</li><li>大数类分为整数(BigInteger)和浮点数(BigDecimal)</li><li>整数和浮点数不能混合运算<h4 id="BigInteger和BigDecimal的使用"><a href="#BigInteger和BigDecimal的使用" class="headerlink" title="BigInteger和BigDecimal的使用"></a>BigInteger和BigDecimal的使用</h4><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5></li></ul><ol><li>直接声明<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BigInteger</span> num1<span class="token punctuation">;</span><span class="token class-name">BigDecimal</span> num2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>构造函数初始化<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BigInteger</span> num1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"12654655874"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigDecimal</span> num2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1275646.5132545"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="赋值–valueOf"><a href="#赋值–valueOf" class="headerlink" title="赋值–valueOf()"></a>赋值–valueOf()</h5>valueOf()不能超过long类型的最大取值<pre class="line-numbers language-java" data-language="java"><code class="language-java">num1 <span class="token operator">=</span> <span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">154847312562L</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//若大于int的范围要加L</span>num2 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">115643.135423</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="加-减-乘-除–add-subtract-multiply-divide"><a href="#加-减-乘-除–add-subtract-multiply-divide" class="headerlink" title="加/减/乘/除–add()/subtract()/multiply()/divide()"></a>加/减/乘/除–add()/subtract()/multiply()/divide()</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BigInteger</span> num1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"126546558741235123541212351235"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigInteger</span> num2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"127564635415145145151235125111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigInteger</span> num3<span class="token punctuation">;</span>num3 <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//加法运算</span>num3 <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//减法运算</span>num3 <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//乘法运算</span>num3 <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//除法运算</span>num3 <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">mod</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//取余</span>num3 <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//求最大值</span>num3 <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//求最小值</span>num3 <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//比较大小</span>num3 <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">gcd</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//求最大公约数</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//可直接输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="进制转换–BigInteger、String-format-、Integer的使用"><a href="#进制转换–BigInteger、String-format-、Integer的使用" class="headerlink" title="进制转换–BigInteger、String.format()、Integer的使用"></a>进制转换–BigInteger、String.format()、Integer的使用</h3><h4 id="转-进制–BigInteger"><a href="#转-进制–BigInteger" class="headerlink" title="*转*进制–BigInteger"></a>*转*进制–BigInteger</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BigInteger</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//二进制转十进制，str为String类型</span><span class="token class-name">BigInteger</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//八进制转十进制</span><span class="token class-name">BigInteger</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//十六进制转十进制</span><span class="token class-name">String</span> num1 <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//十进制转二进制</span><span class="token class-name">String</span> num1 <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//十进制转八进制</span><span class="token class-name">String</span> num1 <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//十进制转十六进制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用String-format-格式化实现十进制转八-十六进制"><a href="#使用String-format-格式化实现十进制转八-十六进制" class="headerlink" title="使用String.format()格式化实现十进制转八/十六进制"></a>使用String.format()格式化实现十进制转八/十六进制</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> num <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%o"</span><span class="token punctuation">,</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//十进制转八进制</span><span class="token class-name">String</span> num <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%x"</span><span class="token punctuation">,</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//十进制转十六进制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="使用Integer类实现十进制转-进制"><a href="#使用Integer类实现十进制转-进制" class="headerlink" title="使用Integer类实现十进制转*进制"></a>使用Integer类实现十进制转*进制</h4><p>Integer类位于java.lang包中，无需导包</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//十进制转二进制，i为int类型</span><span class="token class-name">String</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toOctalString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//十进制转八进制</span><span class="token class-name">String</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//十进制转十六进制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Math运算类"><a href="#Math运算类" class="headerlink" title="Math运算类"></a>Math运算类</h3><p>Math类位于java.lang包下，无需导包</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//求绝对值 13</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//求平方   9</span><span class="token keyword">double</span> num <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">3.23</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//取整(小于该数的最大整数)  3.0</span><span class="token keyword">double</span> num <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">3.23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//取整(大于该数的最小整数)  4.0</span><span class="token keyword">double</span> num <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span>PI           <span class="token comment">//取出π的值</span><span class="token keyword">double</span> num <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3.24</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//四舍五入(保留一位小数)    3.0</span><span class="token keyword">double</span> num <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3.62566</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">100.0</span><span class="token punctuation">;</span>   <span class="token comment">//保留两位小数 3.63</span><span class="token keyword">double</span> num <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3.62566</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000.0</span><span class="token punctuation">;</span> <span class="token comment">//保留三位小数 3.626</span><span class="token keyword">double</span> num <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token comment">//求平方根  10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Random随机数类"><a href="#Random随机数类" class="headerlink" title="Random随机数类"></a>Random随机数类</h3><p>Random类位于java.util包下，需要导包</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span>   <span class="token comment">//导入Random包</span><span class="token class-name">Random</span> rnd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建构造方法</span><span class="token keyword">int</span> num <span class="token operator">=</span> rnd<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//随机生成一个int类型的数</span><span class="token keyword">int</span> num <span class="token operator">=</span> rnd<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//随机生成0~10之间的数(不包括10)</span><span class="token keyword">int</span> num <span class="token operator">=</span> rnd<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">900</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">//随机生成100~1000之间的数(不包括1000)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Calender日期类"><a href="#Calender日期类" class="headerlink" title="Calender日期类"></a>Calender日期类</h3><blockquote><p>set(int field, int value); //第一个参数是日期字段，诸如YEAR、MONTH 等将给定的日历字段设置为给定值。<br>set(int year, int month, int date); // 设置日历字段YEAR、MONTH 和 DAY_OF_MONTH的值<br>例:</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Calendar</span> date <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建实例</span><span class="token comment">// 设置日期为2021年4月17日</span>date<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span>YEAR<span class="token punctuation">,</span> <span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      date<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span>MONTH<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 月份从下标0开始</span>date<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取2021年4月17日是星期几</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span>DAY_OF_WEEK<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//星期六为一星期最后一天   7</span><span class="token comment">// 增减时间</span>date<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span>YEAR<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 增加1年</span>date<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span>MONTH<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 增加2年</span>date<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 减去1天</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ArrayList类"><a href="#ArrayList类" class="headerlink" title="ArrayList类"></a>ArrayList类</h3><p>ArrayList位于java.util包中</p><blockquote><p>List存储元素的特点:<br>有序可重复(存取的顺序相同)</p></blockquote><h4 id="构造列表"><a href="#构造列表" class="headerlink" title="构造列表"></a>构造列表</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//构造一个初始容量为 10 的空列表</span><span class="token class-name">ArrayList</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//构造一个具有指定初始容量的空列表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="常用方法摘要"><a href="#常用方法摘要" class="headerlink" title="常用方法摘要"></a>常用方法摘要</h4><p>注意返回值，API中可查</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">arr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Object</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//将指定的元素添加到此列表的尾部</span>arr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Object</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//将指定的元素插入此列表中的指定位置</span>arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//返回此列表中指定位置上的元素</span>arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//获取列表中元素的个数</span>arr<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">//清空列表</span>arr<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//判断列表是否为空,为空则为true</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//返回此列表中首次出现的指定元素的索引</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//返回此列表中最后一次出现的指定元素的索引</span>arr<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//将列表转换成数组</span>arr<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断列表中是否包含某个元素，包含则返回true</span>arr<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//删除列表中指定位置的元素</span>arr<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//删除列表中首次出现的指定元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Collections工具类可以对List集合中的元素排序</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//排序</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h4 id="ArrayList遍历的3种方式"><a href="#ArrayList遍历的3种方式" class="headerlink" title="ArrayList遍历的3种方式"></a>ArrayList遍历的3种方式</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>for循环遍历<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>增强for遍历<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> num<span class="token operator">:</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Iterator迭代器遍历<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Iterator</span> it <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>迭代器解释:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">arr<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//获取列表所依赖的迭代器对象</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//判断是否下一位有元素，有则返回true</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//将迭代器向下移动一位，并且取出指向的元素</span>it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//移除迭代器返回的最后一个元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li></ol><h3 id="SortedSet类"><a href="#SortedSet类" class="headerlink" title="SortedSet类"></a>SortedSet类</h3><p>SortedSet类位于java.util包中</p><blockquote><p>set存储元素的特点:<br>无需不可重复(存取的顺序不一定相同，元素不可重复)<br>存进去的元素可以按照元素的大小自动排序<br>使用方法和ArrayList一致，两者都是父类Collection下的</p></blockquote><h3 id="HashMap类"><a href="#HashMap类" class="headerlink" title="HashMap类"></a>HashMap类</h3><p>HashMap类位于java.util包中</p><blockquote><p>Map集合特点:<br>Map集合以键值对的方式存储元素(key和value)<br>键(key)特点是无序不可重复的<br>Map和Collection没有关系</p></blockquote><h4 id="Map集合中常用的方法"><a href="#Map集合中常用的方法" class="headerlink" title="Map集合中常用的方法"></a>Map集合中常用的方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//向集合中添加键值对</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//通过key获取value</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//获取集合中键值对的个数</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//判断集合中是否包含此key</span>map<span class="token punctuation">.</span><span class="token function">containsValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//判断集合中是否包含此value</span>map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//通过key将键值对删除</span>map<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//判断集合是否为空</span>map<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//清空集合</span>map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//获取集合中所有的key,返回值为set集合</span>map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//获取集合中所有的values,返回值为Collection集合</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="例"><a href="#例" class="headerlink" title="例:"></a>例:</h4><h5 id="创建Map集合"><a href="#创建Map集合" class="headerlink" title="创建Map集合"></a>创建Map集合</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="存储键值对"><a href="#存储键值对" class="headerlink" title="存储键值对"></a>存储键值对</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"JACK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token string">"SUN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token string">"COOK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>Map存储过程中如果key重复了,value将会被覆盖</p></blockquote><h5 id="遍历Map集合"><a href="#遍历Map集合" class="headerlink" title="遍历Map集合"></a>遍历Map集合</h5><ol><li>迭代器遍历<pre class="line-numbers language-java" data-language="java"><code class="language-java">set keys <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keyset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Iterator</span> it <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Object</span> id <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//得到key</span><span class="token class-name">Object</span> name <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//得到value</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>增强for遍历<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token operator">:</span>map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//遍历value</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token operator">:</span>map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//遍历key</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>制作个人图片api接口</title>
      <link href="2021/04/11/zhi-zuo-ge-ren-tu-pian-api-jie-kou/"/>
      <url>2021/04/11/zhi-zuo-ge-ren-tu-pian-api-jie-kou/</url>
      
        <content type="html"><![CDATA[<p>@<a href="%E5%88%B6%E4%BD%9C%E4%B8%AA%E4%BA%BA%E5%9B%BE%E7%89%87api%E6%8E%A5%E5%8F%A3">TOC</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>当我们需要在网站上显示随机图片时，会用到api接口，这时可以自己做一个图片api接口，就不用担心使用别人的api接口不稳定或对图片不满意等情况了<br><strong>本篇文章是基于jsDeliver + github制作图片api接口</strong></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li>一台配置好域名＆证书的服务器</li><li>服务器安装好基本的lnmp环境，需要php-fpm，新版php已集成（这里mysql用不上）</li><li>一个github账号（需要科学上网）<h1 id="过程介绍"><a href="#过程介绍" class="headerlink" title="过程介绍"></a>过程介绍</h1></li><li>上传图片到github仓库中</li><li>在github中进行项目的发布</li><li>编写php文件，引用jsDeliver上的文件</li><li>将php文件上传到服务器中</li><li>在nginx配置文件中配置好php-fpm相关配置<h1 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h1><h2 id="上传图片到github仓库中"><a href="#上传图片到github仓库中" class="headerlink" title="上传图片到github仓库中"></a>上传图片到github仓库中</h2>在本地建一个放图片的文件夹，==图片需为jpg格式，名称用数字排好序，注意该勾的勾上==<br><img src="https://img-blog.csdnimg.cn/20210222220524604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDAwOTcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><p>下载<a href="https://desktop.github.com/">GitHub Desktop</a>，登录账号<br>在GitHub Desktop中克隆自己已存在的仓库（==要有README.md文件，仓库是公开的==）<br>ps:可以专门弄一个放图片的仓库<br><img src="https://img-blog.csdnimg.cn/2021022222054262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDAwOTcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择已有的库，选择本地需要克隆的路径<br><img src="https://img-blog.csdnimg.cn/20210223001926374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDAwOTcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>没有仓库就新建一个，该勾的勾上<br><img src="https://img-blog.csdnimg.cn/202102222206446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDAwOTcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210222220655348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDAwOTcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>同步操作</strong><br>①写好说明②提交③更新到github<br><img src="https://img-blog.csdnimg.cn/20210222221804499.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDAwOTcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>如果是在GitHub Desktop上新创建的仓库，第三步会有一个提示框，注意把勾去掉，那勾相当于代码私密，我们需要公开代码<br><img src="https://img-blog.csdnimg.cn/20210222221815872.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDAwOTcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="在github中进行项目的发布"><a href="#在github中进行项目的发布" class="headerlink" title="在github中进行项目的发布"></a>在github中进行项目的发布</h2><p>仓库管理中点击release<br><img src="https://img-blog.csdnimg.cn/20210222222518647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDAwOTcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>①填写版本号②描述说明③发布<br><img src="https://img-blog.csdnimg.cn/20210222222518646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDAwOTcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>到这里就可以引用资源了</p><blockquote><p><a href="https://cdn.jsdelivr.net/gh/%E4%BD%A0%E7%9A%84github%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BD%A0%E7%9A%84%E4%BB%93%E5%BA%93%E5%90%8D@%E5%8F%91%E5%B8%83%E7%9A%84%E7%89%88%E6%9C%AC%E5%8F%B7/%E6%96%87%E4%BB%B6%E5%90%8D">https://cdn.jsdelivr.net/gh/你的github用户名/你的仓库名@发布的版本号/文件名</a><br>例:<a href="https://cdn.jsdelivr.net/gh/bananaYH/images@0.33/img/2.jpg">https://cdn.jsdelivr.net/gh/bananaYH/images@0.33/img/2.jpg</a></p></blockquote><blockquote><p>不加版本号等同于默认访问<a href="https://cdn.jsdelivr.net/gh/bananaYH/images@master/img/2.jpg">https://cdn.jsdelivr.net/gh/bananaYH/images@master/img/2.jpg</a><br>现github默认分支名是main，若要不加@版本号访问则将main重命名为master<br>不加@，好像jsDeliver那边不能及时更新过来，==建议还是加上@，能够及时更新==</p></blockquote><h2 id="编写php文件，引用jsDeliver上的文件"><a href="#编写php文件，引用jsDeliver上的文件" class="headerlink" title="编写php文件，引用jsDeliver上的文件"></a>编写php文件，引用jsDeliver上的文件</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">?</span>php$rand <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$url <span class="token operator">=</span> <span class="token string">'https://cdn.jsdelivr.net/gh/bananaYH/images@0.33/img/'</span><span class="token punctuation">.</span>$rand<span class="token punctuation">.</span><span class="token string">'.jpg'</span><span class="token punctuation">;</span>$img <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span>$url<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Type: image/jpeg;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>echo $img<span class="token punctuation">;</span><span class="token operator">?</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>rang随机产生数字，按图片编号填写<br>填写好url</p></blockquote><p>编辑好，用FTP上传该php文件到域名根目录下</p><h2 id="在nginx配置文件中配置好php-fpm相关配置"><a href="#在nginx配置文件中配置好php-fpm相关配置" class="headerlink" title="在nginx配置文件中配置好php-fpm相关配置"></a>在nginx配置文件中配置好php-fpm相关配置</h2><p>编辑nginx.conf文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">vim <span class="token operator">/</span>www<span class="token operator">/</span>server<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token operator">/</span>nginx<span class="token punctuation">.</span>conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在配置了443和ssl的server中加上以下代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">location <span class="token operator">~</span> \<span class="token punctuation">.</span>php$ <span class="token punctuation">{</span>        root           <span class="token operator">/</span>www<span class="token operator">/</span>wwwroot<span class="token punctuation">;</span>        fastcgi_pass   unix<span class="token operator">:</span><span class="token operator">/</span>tmp<span class="token operator">/</span>php<span class="token operator">-</span>cgi<span class="token operator">-</span><span class="token number">74.</span>sock<span class="token punctuation">;</span>        fastcgi_index  index<span class="token punctuation">.</span>php<span class="token punctuation">;</span>        fastcgi_param  <span class="token constant">SCRIPT_FILENAME</span>  <span class="token operator">/</span>www<span class="token operator">/</span>wwwroot$fastcgi_script_name<span class="token punctuation">;</span>        include        fastcgi_params<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>root 指定php的根目录，自行更改<br>fastcgi_pass 监听端口（两种形式tcp:127.0.0.1:9000或unix）tcp注意要开防火墙，下面详细解释<br>fastcgi_indexnginx 默认首页文件<br>fastcgi_param 脚本文件请求的路径，更改/www/wwwroot为根目录路径<br>include 引入fastcgi的配置文件</p></blockquote><p>参考<br><img src="https://img-blog.csdnimg.cn/20210222234143670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDAwOTcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>使用unix</strong><br>查看php-fpm.conf文件，不知道在哪输查找命令</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">find <span class="token operator">/</span> <span class="token operator">-</span>name php<span class="token operator">-</span>fpm<span class="token punctuation">.</span>conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210222234625809.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDAwOTcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>将.sock的路径复制到nginx.conf中的fastcgi_pass即可</p><p><strong>使用tcp方式</strong><br>在php-fpm.conf中将.sock路径更改为127.0.0.1:9000即可</p><p>==注意事项！！！==<br>php-fpm.conf和nginx.conf文件中的user是一致的，不一致会出现权限问题<br>当两边user不为root时，根目录最好不要再/root下面，会有权限问题</p><p>重启Nginx服务</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">service nginx restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="测试php配置"><a href="#测试php配置" class="headerlink" title="测试php配置"></a>测试php配置</h2><p>创建编辑index.php文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">?</span>php     <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">?</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将index.php文件放到网页根目录下</p><blockquote><p>https://域名/index.php 访问</p></blockquote><p>出现php页面即为nginx配置php成功<br><img src="https://img-blog.csdnimg.cn/20210223000051768.png" alt="在这里插入图片描述"></p><h2 id="测试图片api接口"><a href="#测试图片api接口" class="headerlink" title="测试图片api接口"></a>测试图片api接口</h2><p>访问并运行php文件，这里假设php文件名为images.php</p><blockquote><p>https://域名/images.php</p></blockquote><p>正常情况是和引用jsDeliver的资源一样，会显示一张图片<br><img src="https://img-blog.csdnimg.cn/20210223000835944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDAwOTcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 搭建博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零部署halo博客</title>
      <link href="2021/04/11/cong-ling-bu-shu-halo-bo-ke/"/>
      <url>2021/04/11/cong-ling-bu-shu-halo-bo-ke/</url>
      
        <content type="html"><![CDATA[<p>@<a href="centos+docker+halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2">TOC</a></p><h1 id="从零部署halo博客"><a href="#从零部署halo博客" class="headerlink" title="从零部署halo博客"></a>从零部署halo博客</h1><p>此教程是使用宝塔+docker+mysql搭建个人博客，使用H2可上<a href="https://docs.halo.run/">halo官网教程</a>查阅</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>一台云服务器 </li><li>一个域名（国内服务器需要备案，备案要很久，最好提前）</li><li>域名实名，申请SSL证书</li><li>域名解析</li></ul><h2 id="安装宝塔面板"><a href="#安装宝塔面板" class="headerlink" title="安装宝塔面板"></a>安装宝塔面板</h2><p>==安装前注意系统必须为没装过其它环境如Apache/Nginx/php/MySQL的新系统==，以下使用centos系统安装宝塔面板</p><ul><li>执行安装命令<pre class="line-numbers language-none"><code class="language-none">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>安装成功后会给你面板地址和管理员账号和密码，注意要在服务器后台安全组或是防火墙中打开8888端口</p></blockquote></li></ul><blockquote><p>面板登录进去后会让你一键部署环境(LNMP或LAMP，推荐LNMP)<br>安装方式编译安装比极速安装更加稳定，但安装时间需要1到2小时，极速安装10多分钟，时间充裕推荐编译安装</p><ul><li>halo官方要求mysql数据库需要5.7+，8.0需要6RAM以上，推荐就5.7。php和phpmyadmin选最新,其他随意</li></ul></blockquote><blockquote><p>这里我进行编译安装时面板卡死了一次，任务列表是空的，服务器满载，cpu使用率低，重登也是特别卡和慢,这时候就别等了，这里我重启服务器后，问题解决，编译安装正常继续运行</p></blockquote><h2 id="安装Docker管理器"><a href="#安装Docker管理器" class="headerlink" title="安装Docker管理器"></a>安装Docker管理器</h2><ul><li>在宝塔面板的软件商店中直接安装即可</li></ul><h2 id="下载并修改halo配置文件"><a href="#下载并修改halo配置文件" class="headerlink" title="下载并修改halo配置文件"></a>下载并修改halo配置文件</h2><ul><li>创建并进入工作目录<pre class="line-numbers language-none"><code class="language-none">mkdir ~/.halo || cd ~/.halo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>下载示例配置文件到工作目录<pre class="line-numbers language-none"><code class="language-none">wget https://dl.halo.run/config/application-template.yaml -O ./application.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>根据需要编辑配置文件，配置数据库或者端口等<pre class="line-numbers language-none"><code class="language-none">vim application.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>使用mysql==本地数据库==的配置图<br><img src="https://img-blog.csdnimg.cn/20210212231836265.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDAwOTcw,size_16,color_FFFFFF,t_70" alt="application.yaml配置图"><blockquote><ul><li>默认是使用的H2数据库</li><li>使用mysql数据库则将H2配置打上注释，将mysql配置注释放开</li><li>修改username和password为mysql的账号和密码，密码在宝塔数据库界面可查看</li><li>==若在容器中使用数据库，则需要将127.0.0.1换成数据库的容器名，端口为容器内部端口 例：将127.0.0.1:3306换成blog_mysql:3306==</li><li>以下根据个人需求配置：<br>port为halo博客运行的端口<br>admin-path为后台管理的根路径<br>cache是设置缓存数据的保存方式<br>compression设置是否开启压缩，用Nginx等反向代理服务器时通常会默认开启</li></ul></blockquote></li></ul><p><strong>==下面根据个人 选择一种进行配置==</strong></p><h3 id="①直接使用本地数据库"><a href="#①直接使用本地数据库" class="headerlink" title="①直接使用本地数据库"></a>①直接使用本地数据库</h3><ul><li><p>进入msyql</p><pre class="line-numbers language-none"><code class="language-none">mysql -u root -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建halodb数据库</p><pre class="line-numbers language-none"><code class="language-none">create database halodb character set utf8mb4 collate utf8mb4_bin;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意这里官方要求字符集为utf8mb4,排序规则为utf8mb4_bin</p></blockquote></li><li><p>拉取最新的 Halo 镜像</p><pre class="line-numbers language-none"><code class="language-none">docker pull halohub/halo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>从 1.4.3 开始，Docker 镜像已经转移到 halohub 组织，不再是 ruibaby/halo</p></blockquote></li><li><p>创建halo容器并使用本地数据库</p><pre class="line-numbers language-none"><code class="language-none">docker run -itd --net host --name halo -p 8090:8090 -v ~/.halo:/root/.halo --restart=always halohub/halo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>参数说明：</p><ul><li><strong>-i</strong>， 即使没有连接，也要保持标准输入保持打开状态，一般与 -t 连用</li><li><strong>-t</strong>， 分配一个伪tty，一般与 -i 连用</li><li><strong>-d</strong>，在后台运行容器，并且打印容器id</li><li><strong>- -name</strong>，容器名</li><li><strong>- -net</strong>，指定容器的网络配置</li></ul></blockquote></li></ul><p><strong>- -net=bridge</strong> 这个是默认值，连接到默认的网桥。<br>==<strong>- -net=host</strong> 容器使用本地主机的网络，它拥有完全的本地主机接口访问权限==<br><strong>- -net=container:NAME_or_ID 让 Docker</strong> 使用其他容器的网路，共享IP和PORT等网络资源，两者进程可以直接通过 lo 环回接口通信<br><strong>- -net=none</strong> 容器使用自己的网络，但是不进行网络配置，之后用户可以自行配置</p><blockquote><ul><li><strong>-p</strong>， 容器内部端口绑定到指定的主机端口，主机端口：容器端口</li><li><strong>-v</strong>，  挂载目录，这里是将主机的目录~/.halo挂载到容器的目录/root/.halo上</li><li><strong>- -restart=always</strong>，当docker重启时，容器自动启动</li></ul></blockquote><blockquote><p>docker默认的网络模式是bridge，因此默认容器内无法访问本地127.0.0.1</p></blockquote><h3 id="②利用容器间的关联使用容器中的数据库"><a href="#②利用容器间的关联使用容器中的数据库" class="headerlink" title="②利用容器间的关联使用容器中的数据库"></a>②利用容器间的关联使用容器中的数据库</h3><ul><li><p>拉取mysql5.7镜像</p><pre class="line-numbers language-none"><code class="language-none">docker pull mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建并启动mysql容器</p><pre class="line-numbers language-none"><code class="language-none">docker run --name blog_mysql -p 3307:3306 -e MYSQL_ROOT_PASSWORD=****** -d mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li><strong>- -name</strong>，容器名</li><li><strong>-e</strong> 设置环境变量，MYSQL_ROOT_PASSWORD为数据库密码，自行修改，用户名默认root</li><li>这里因为我主机已有mysql，所以映射端口到3307，这个自行决定</li></ul></blockquote></li><li><p>进入容器</p><pre class="line-numbers language-none"><code class="language-none">docker exec -it blog_mysql /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>进入mysql并创建halo必要数据库halodb，注意字符集和排序规则</p><pre class="line-numbers language-none"><code class="language-none">mysql -u root -pcreate database halodb character set utf8mb4 collate utf8mb4_bin;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>拉取最新的 Halo 镜像</p><pre class="line-numbers language-none"><code class="language-none">docker pull halohub/halo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建halo容器并使其关联数据库容器</p><pre class="line-numbers language-none"><code class="language-none">docker run -itd --name halo --link blog_mysql -p 8090:8090 -v ~/.halo:/root/.halo --restart=always halohub/halo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>参数说明：</p><ul><li><strong>-i</strong>， 即使没有连接，也要保持标准输入保持打开状态，一般与 -t 连用</li><li><strong>-t</strong>， 分配一个伪tty，一般与 -i 连用</li><li><strong>-d</strong>，在后台运行容器，并且打印容器id   </li><li><strong>- -name</strong>，容器名</li><li>==<strong>- -link</strong>，指定容器间的关联==</li><li><strong>-p</strong>， 容器内部端口绑定到指定的主机端口，主机端口：容器端口</li><li><strong>-v</strong>，  挂载目录，这里是将主机的目录~/.halo挂载到容器的目录/root/.halo上</li><li><strong>- -restart=always</strong>，当docker重启时，容器自动启动</li></ul></blockquote></li></ul><p><strong>PS:如果要使用外部数据库管理工具远程管理mysql，则需要用户开启远程登录功能</strong></p><pre class="line-numbers language-none"><code class="language-none">Grant all privileges on *.* to 'root'@'%' identified by ‘password’with grant option;flush privileges;      刷新权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>*. * 为 数据库.表 ，root为用户，%代表所有主机  ，password处填写用户密码</p></blockquote><h2 id="以下为注意事项！！！"><a href="#以下为注意事项！！！" class="headerlink" title="==以下为注意事项！！！=="></a>==以下为注意事项！！！==</h2><p><strong>==创建并启动halo容器后，会有20s左右的初始化建表时间，初始化后在数据库halodb当中能看见自动创建的表，若没有表，请检查问题==</strong><br>Halo工作目录的绝对路径为 ~/.halo，这个工作目录是固定的，Halo容器运行后里面通常包含下列目录或文件：<br>db：存放 H2 Database 的物理文件，如果您使用 MySQL 数据库，那么不会存在这个目录<br>templates/themes：里面包含用户所下载的主题<br>static：相当于网站的根目录<br>logs：运行日志目录<br>application.yaml：配置文件</p><p><strong>==放行端口80 443 8090！！！==</strong><br><strong>==云服务器防火墙和宝塔的防火墙两边都要放行！！！==</strong></p><p><strong>到这里我们就可以以<a href="http://ip:8090的方式访问halo安装程序了">http://ip:8090的方式访问halo安装程序了</a></strong><br>可以先配置好域名访问和SSL再进行安装</p><h2 id="配置域名访问、SSL，使用-Nginx-进行反向代理"><a href="#配置域名访问、SSL，使用-Nginx-进行反向代理" class="headerlink" title="配置域名访问、SSL，使用 Nginx 进行反向代理"></a>配置域名访问、SSL，使用 Nginx 进行反向代理</h2><ul><li>安装 Nginx<br>之前安装LNMP时已安装</li><li>编辑配置文件<blockquote><p>官方是下载模板再进行配置，这里使用全局</p></blockquote><pre class="line-numbers language-none"><code class="language-none">vim /www/server/nginx/conf/nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>在http的括号内加入以下代码:<pre class="line-numbers language-none"><code class="language-none">server {    listen 80;    server_name baidu.com www.baidu.com; #域名    rewrite ^(.*)$ https://$host$1 permanent;     client_max_body_size 1024m;}server {    listen 443 ssl;     server_name baidu.com www.baidu.com; #域名     ssl_certificate /usr/local/xxxxxx.pem; #证书地址    ssl_certificate_key /usr/local/xxxxxxx.key; #证书地址    ssl_session_timeout 5m;    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;    ssl_prefer_server_ciphers on;     location / {        proxy_set_header HOST $host;        proxy_set_header X-Forwarded-Proto $scheme;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;         proxy_pass http://127.0.0.1:8090/; #halo进入端口    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>修改域名</li><li>用ftp将证书文件放到云服务器中，配置好证书地址，第一个证书后缀不一定是pem</li><li>rewrite ^(.*)$ https://$host$1 permanent;是强制跳转http到https</li></ul></blockquote></li><li>修改后需要重载Nginx<pre class="line-numbers language-none"><code class="language-none">在宝塔中重启Nginx    或    nginx -s reload    <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><strong>到这里，就可以使用域名访问网站了！！！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 搭建博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> LNMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/04/10/hello-world/"/>
      <url>2021/04/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
