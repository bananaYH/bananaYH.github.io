<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>蓝桥杯复习</title>
      <link href="2021/04/18/lan-qiao-bei-fu-xi/"/>
      <url>2021/04/18/lan-qiao-bei-fu-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="蓝桥杯复习"><a href="#蓝桥杯复习" class="headerlink" title="蓝桥杯复习"></a>蓝桥杯复习</h1><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例：</p><ul><li>输入值<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> b <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> c <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>输入字符串<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>in.next() 从缓冲区接收字符遇到空格后停止。<br>in.nextLine() 从缓冲区接收字符，并且接收空格，遇到换行才停止，并且会自动舍弃换行。</p></blockquote></li></ul><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>常用的几种方式：  </p><ul><li><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//仅输出变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出变量后会自动换行</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//格式化输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>例：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%9.2f"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"9.2"中的9表示输出的长度，2表示小数点后的位数</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%o"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"o"表示输出八进制整数</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"x"表示输出十六进制整数</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"d"表示输出字符串</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%08"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出位数为8的整数，不足前面补0(适合二进制格式)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="数组常用类–Arrays工具类"><a href="#数组常用类–Arrays工具类" class="headerlink" title="数组常用类–Arrays工具类"></a>数组常用类–Arrays工具类</h3><p>Arrays类位于util包中<br>该工具类主要针对的是数组的操作<br>例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span> <span class="token comment">//需要将Arrays导入</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取指定值的下标(二分查找)</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//按升序进行排序</span><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回数组字符串形式</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[1, 2, 3, 5, 6]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ul><li>字符串一旦创建就不可再改变(可重新指向)</li><li>为了提升字符串的访问效率，程序中使用了“缓存”技术<br>因此在java中所有使用“双引号”括起来的字符串都会在“字符串常量池”中创建，字符串常量池在<strong>方法区</strong>中被储存(两个相同字符串在字符串常量池中保存的是相同地址)</li></ul><h3 id="String常用方法"><a href="#String常用方法" class="headerlink" title="String常用方法"></a>String常用方法</h3><p>String类位于lang包中，无需导入<br>以下String指的是需要操作的String类型变量</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">chatAt</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//返回一个指定位置的char值</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//判断一个字符串是否以endstr(字符串)结尾</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//判断对象(字符串)之间是否相等</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//判断字符串之间是否相等，不考虑大小写</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//返回指定字符串str在此字符串中第一次出现的索引，返回int值</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//返回指定字符串str在此字符串中最后一次出现的索引，返回int值</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//返回字符串长度，返回int值</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span><span class="token class-name">String</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//在String中将所有的s1字符串替换为s2字符串，返回String值</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">replaceFirst</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span><span class="token class-name">String</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//只替换第一个子字符串，返回String值</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//根据str字符串拆分String，返回String[]数组</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//将String转换为大写，返回String值</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//将String转换为小写，返回String值</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//将String转换为char数组，返回char[]数组</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//去除String前后空白，返回String值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用toCharArray-增强for遍历String字符串"><a href="#使用toCharArray-增强for遍历String字符串" class="headerlink" title="使用toCharArray()+增强for遍历String字符串"></a>使用toCharArray()+增强for遍历String字符串</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> a<span class="token operator">:</span>s2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//12345</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="竞赛常用类"><a href="#竞赛常用类" class="headerlink" title="竞赛常用类"></a>竞赛常用类</h2><h3 id="大数类"><a href="#大数类" class="headerlink" title="大数类"></a>大数类</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li>大数类位于java.math.*包中，其理论上可以储存无限位的大数</li><li>大数类分为整数(BigInteger)和浮点数(BigDecimal)</li><li>整数和浮点数不能混合运算</li></ul><h4 id="BigInteger和BigDecimal的使用"><a href="#BigInteger和BigDecimal的使用" class="headerlink" title="BigInteger和BigDecimal的使用"></a>BigInteger和BigDecimal的使用</h4><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><ol><li>直接声明<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BigInteger</span> num1<span class="token punctuation">;</span><span class="token class-name">BigDecimal</span> num2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>构造函数初始化<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BigInteger</span> num1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"12654655874"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigDecimal</span> num2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1275646.5132545"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="赋值–valueOf"><a href="#赋值–valueOf" class="headerlink" title="赋值–valueOf()"></a>赋值–valueOf()</h5>valueOf()不能超过long类型的最大取值<pre class="line-numbers language-java" data-language="java"><code class="language-java">num1 <span class="token operator">=</span> <span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">154847312562L</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//若大于int的范围要加L</span>num2 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">115643.135423</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="加-减-乘-除–add-subtract-multiply-divide"><a href="#加-减-乘-除–add-subtract-multiply-divide" class="headerlink" title="加/减/乘/除–add()/subtract()/multiply()/divide()"></a>加/减/乘/除–add()/subtract()/multiply()/divide()</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BigInteger</span> num1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"126546558741235123541212351235"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigInteger</span> num2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"127564635415145145151235125111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigInteger</span> num3<span class="token punctuation">;</span>num3 <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//加法运算</span>num3 <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//减法运算</span>num3 <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//乘法运算</span>num3 <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//除法运算</span>num3 <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">mod</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//取余</span>num3 <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//求最大值</span>num3 <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//求最小值</span>num3 <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//比较大小</span>num3 <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">gcd</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//求最大公约数</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//可直接输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="进制转换–BigInteger、String-format-、Integer的使用"><a href="#进制转换–BigInteger、String-format-、Integer的使用" class="headerlink" title="进制转换–BigInteger、String.format()、Integer的使用"></a>进制转换–BigInteger、String.format()、Integer的使用</h3><h4 id="转-进制–BigInteger"><a href="#转-进制–BigInteger" class="headerlink" title="*转*进制–BigInteger"></a>*转*进制–BigInteger</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BigInteger</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//二进制转十进制，str为String类型</span><span class="token class-name">BigInteger</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//八进制转十进制</span><span class="token class-name">BigInteger</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//十六进制转十进制</span><span class="token class-name">String</span> num1 <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//十进制转二进制</span><span class="token class-name">String</span> num1 <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//十进制转八进制</span><span class="token class-name">String</span> num1 <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//十进制转十六进制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用String-format-格式化实现十进制转八-十六进制"><a href="#使用String-format-格式化实现十进制转八-十六进制" class="headerlink" title="使用String.format()格式化实现十进制转八/十六进制"></a>使用String.format()格式化实现十进制转八/十六进制</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> num <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%o"</span><span class="token punctuation">,</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//十进制转八进制</span><span class="token class-name">String</span> num <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%x"</span><span class="token punctuation">,</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//十进制转十六进制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="使用Integer类实现十进制转-进制"><a href="#使用Integer类实现十进制转-进制" class="headerlink" title="使用Integer类实现十进制转*进制"></a>使用Integer类实现十进制转*进制</h4><p>Integer类位于java.lang包中，无需导包</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//十进制转二进制，i为int类型</span><span class="token class-name">String</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toOctalString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//十进制转八进制</span><span class="token class-name">String</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//十进制转十六进制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Math运算类"><a href="#Math运算类" class="headerlink" title="Math运算类"></a>Math运算类</h3><p>Math类位于java.lang包下，无需导包</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//求绝对值 13</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//求平方   9</span><span class="token keyword">double</span> num <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">3.23</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//取整(小于该数的最大整数)  3.0</span><span class="token keyword">double</span> num <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">3.23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//取整(大于该数的最小整数)  4.0</span><span class="token keyword">double</span> num <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span>PI           <span class="token comment">//取出π的值</span><span class="token keyword">double</span> num <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3.24</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//四舍五入(保留一位小数)    3.0</span><span class="token keyword">double</span> num <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3.62566</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">100.0</span><span class="token punctuation">;</span>   <span class="token comment">//保留两位小数 3.63</span><span class="token keyword">double</span> num <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3.62566</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000.0</span><span class="token punctuation">;</span> <span class="token comment">//保留三位小数 3.626</span><span class="token keyword">double</span> num <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token comment">//求平方根  10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Random随机数类"><a href="#Random随机数类" class="headerlink" title="Random随机数类"></a>Random随机数类</h3><p>Random类位于java.util包下，需要导包</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span>   <span class="token comment">//导入Random包</span><span class="token class-name">Random</span> rnd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建构造方法</span><span class="token keyword">int</span> num <span class="token operator">=</span> rnd<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//随机生成一个int类型的数</span><span class="token keyword">int</span> num <span class="token operator">=</span> rnd<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//随机生成0~10之间的数(不包括10)</span><span class="token keyword">int</span> num <span class="token operator">=</span> rnd<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">900</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">//随机生成100~1000之间的数(不包括1000)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Calender日期类"><a href="#Calender日期类" class="headerlink" title="Calender日期类"></a>Calender日期类</h3><blockquote><p>set(int field, int value); //第一个参数是日期字段，诸如YEAR、MONTH 等将给定的日历字段设置为给定值。<br>set(int year, int month, int date); // 设置日历字段YEAR、MONTH 和 DAY_OF_MONTH的值<br>例:</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Calendar</span> date <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建实例</span><span class="token comment">// 设置日期为2021年4月17日</span>date<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span>YEAR<span class="token punctuation">,</span> <span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      date<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span>MONTH<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 月份从下标0开始</span>date<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取2021年4月17日是星期几</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span>DAY_OF_WEEK<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//星期六为一星期最后一天   7</span><span class="token comment">// 增减时间</span>date<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span>YEAR<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 增加1年</span>date<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span>MONTH<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 增加2年</span>date<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 减去1天</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ArrayList类"><a href="#ArrayList类" class="headerlink" title="ArrayList类"></a>ArrayList类</h3><p>ArrayList位于java.util包中</p><blockquote><p>List存储元素的特点:<br>有序可重复(存取的顺序相同)</p></blockquote><h4 id="构造列表"><a href="#构造列表" class="headerlink" title="构造列表"></a>构造列表</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//构造一个初始容量为 10 的空列表</span><span class="token class-name">ArrayList</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//构造一个具有指定初始容量的空列表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="常用方法摘要"><a href="#常用方法摘要" class="headerlink" title="常用方法摘要"></a>常用方法摘要</h4><p>注意返回值，API中可查</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">arr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Object</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//将指定的元素添加到此列表的尾部</span>arr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Object</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//将指定的元素插入此列表中的指定位置</span>arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//返回此列表中指定位置上的元素</span>arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//获取列表中元素的个数</span>arr<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">//清空列表</span>arr<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//判断列表是否为空,为空则为true</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//返回此列表中首次出现的指定元素的索引</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//返回此列表中最后一次出现的指定元素的索引</span>arr<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//将列表转换成数组</span>arr<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断列表中是否包含某个元素，包含则返回true</span>arr<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//删除列表中指定位置的元素</span>arr<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//删除列表中首次出现的指定元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Collections工具类可以对List集合中的元素排序</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//排序</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h4 id="ArrayList遍历的3种方式"><a href="#ArrayList遍历的3种方式" class="headerlink" title="ArrayList遍历的3种方式"></a>ArrayList遍历的3种方式</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>for循环遍历<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>增强for遍历<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> num<span class="token operator">:</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Iterator迭代器遍历<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Iterator</span> it <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>迭代器解释:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">arr<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//获取列表所依赖的迭代器对象</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//判断是否下一位有元素，有则返回true</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//将迭代器向下移动一位，并且取出指向的元素</span>it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//移除迭代器返回的最后一个元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li></ol><h3 id="SortedSet类"><a href="#SortedSet类" class="headerlink" title="SortedSet类"></a>SortedSet类</h3><p>SortedSet类位于java.util包中</p><blockquote><p>set存储元素的特点:<br>无需不可重复(存取的顺序不一定相同，元素不可重复)<br>存进去的元素可以按照元素的大小自动排序<br>使用方法和ArrayList一致，两者都是父类Collection下的</p></blockquote><h3 id="HashMap类"><a href="#HashMap类" class="headerlink" title="HashMap类"></a>HashMap类</h3><p>HashMap类位于java.util包中</p><blockquote><p>Map集合特点:<br>Map集合以键值对的方式存储元素(key和value)<br>键(key)特点是无序不可重复的<br>Map和Collection没有关系</p></blockquote><h4 id="Map集合中常用的方法"><a href="#Map集合中常用的方法" class="headerlink" title="Map集合中常用的方法"></a>Map集合中常用的方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//向集合中添加键值对</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//通过key获取value</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//获取集合中键值对的个数</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//判断集合中是否包含此key</span>map<span class="token punctuation">.</span><span class="token function">containsValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//判断集合中是否包含此value</span>map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//通过key将键值对删除</span>map<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//判断集合是否为空</span>map<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//清空集合</span>map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//获取集合中所有的key,返回值为set集合</span>map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//获取集合中所有的values,返回值为Collection集合</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例:</p><h5 id="创建Map集合"><a href="#创建Map集合" class="headerlink" title="创建Map集合"></a>创建Map集合</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="存储键值对"><a href="#存储键值对" class="headerlink" title="存储键值对"></a>存储键值对</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"JACK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token string">"SUN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token string">"COOK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>Map存储过程中如果key重复了,value将会被覆盖</p></blockquote><h5 id="遍历Map集合"><a href="#遍历Map集合" class="headerlink" title="遍历Map集合"></a>遍历Map集合</h5><ol><li>迭代器遍历<pre class="line-numbers language-java" data-language="java"><code class="language-java">set keys <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keyset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Iterator</span> it <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Object</span> id <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//得到key</span><span class="token class-name">Object</span> name <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//得到value</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>增强for遍历<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token operator">:</span>map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//遍历value</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token operator">:</span>map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//遍历key</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯复习</title>
      <link href="2021/04/18/php-ji-chu/"/>
      <url>2021/04/18/php-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="php基础学习笔记"><a href="#php基础学习笔记" class="headerlink" title="php基础学习笔记"></a>php基础学习笔记</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="php代码标记"><a href="#php代码标记" class="headerlink" title="php代码标记"></a>php代码标记</h3><p>在PHP中，有多种标记来区分PHP脚本</p><p>ASP标记：&lt;%   php代码  %&gt;</p><p>短标记：<!--? PHP代码 ?--></p><p>脚本标记：<script language="php">php代码</script></p><p>标准标记（常用）：<!--?php  PHP代码  ?--></p><p>ASP、短标记和脚本标记基本已弃用(默认关闭)，如果需要使用则在php.ini配置文件中开启</p><h3 id="PHP语句分隔符"><a href="#PHP语句分隔符" class="headerlink" title="PHP语句分隔符"></a>PHP语句分隔符</h3><p>在PHP中，系统通常以符号 ; 来判断行的结束</p><p>标记结束符 ?&gt; 有自带语句结束符的效果，在纯PHP文件中，可以没有标记结束符</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><pre class="line-numbers language-none"><code class="language-none">//      单行注释#       单行注释/** *    多行注释 / <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h4><p>定义和赋值</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$var1</span><span class="token punctuation">;</span>         <span class="token comment">//定义变量var1</span><span class="token variable">$var2</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment">//定义变量var2，同时赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出变量</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">echo</span> <span class="token variable">$var2</span><span class="token punctuation">;</span>    <span class="token comment">//通过var2变量名找到内容1，然后输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改变量</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$var2</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除变量</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$var2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="变量命名规则："><a href="#变量命名规则：" class="headerlink" title="变量命名规则："></a>变量命名规则：</h4><ol><li>变量名必须以“$”符号开始</li><li>变量名由字母、数字和下划线构成，但是不能以数字开头</li><li>允许中文变量(不建议)</li></ol><h4 id="预定义变量："><a href="#预定义变量：" class="headerlink" title="预定义变量："></a>预定义变量：</h4><p>预定义变量是系统提前定义的变量，储存许多需要用到的数据（预定义变量都是数组）</p><p>$_GET：获取所有表单以 get 方式提交的数据</p><p>$_POST：POST提交的数据都会保存于此</p><p>$_REQUEST：GET和POST提交的都会保存</p><p>$GLOBALS：PHP中所有的全局变量</p><p>$_SERVER：服务器信息</p><p>$_SESSION： session会话数据</p><p>$_COOKIE： cookie会话数据</p><p>$_ENV：环境信息</p><p>$_FILES：用户上传的文件信息</p><h4 id="可变变量"><a href="#可变变量" class="headerlink" title="可变变量"></a>可变变量</h4><p>如果一个变量保存的值刚好是另外一个变量的名字，那么可以直接通过访问一个变量得到另外一个变量的值，只需在变量前面再加一个$符号</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'b'</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'name'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$$a</span><span class="token punctuation">;</span>         <span class="token comment">//结果为name</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="变量传值"><a href="#变量传值" class="headerlink" title="变量传值"></a>变量传值</h4><p>变量传值有两种方式：值传递，引用传递</p><p>值传递：将变量保存的值传给另一个变量（两个变量没有关系）</p><p>引用传递：将变量保存值的内存地址传给另一个变量（两个变量是相同地址，同一个值）</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span>     <span class="token comment">//值传递</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token comment">//引用传递</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>常量一旦定义，通常数据不可改变（用户级别）</p><p>常量在定义时必须赋值</p><h4 id="常量定义方式"><a href="#常量定义方式" class="headerlink" title="常量定义方式"></a>常量定义方式</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">define</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'常量名'</span><span class="token punctuation">,</span>常量值<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> 常量名 <span class="token operator">=</span> 值<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="常量命令规则："><a href="#常量命令规则：" class="headerlink" title="常量命令规则："></a>常量命令规则：</h4><ol><li>不需要使用“$”符号</li><li>由字母、数字和下划线组成，不能以数字开头</li><li>常量名通常以大写字母为主</li></ol><h4 id="定义特殊常量："><a href="#定义特殊常量：" class="headerlink" title="定义特殊常量："></a>定义特殊常量：</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">define</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'-_-'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'smile'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//const -_- = 'smile';  //错误！！！</span><span class="token keyword">echo</span> <span class="token function">constant</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'-_-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="系统常量"><a href="#系统常量" class="headerlink" title="系统常量"></a>系统常量</h4><p>常用系统常量</p><p>PHP_VERSION：PHP版本号</p><p>PHP_INT_SIZE：整形占用的字节数</p><p>PHP_INT_MAX：整形的最大值</p><h4 id="系统魔术常量"><a href="#系统魔术常量" class="headerlink" title="系统魔术常量"></a>系统魔术常量</h4><p>魔术常量以双下划线开始+常量名+双下划线结束，值通常会跟着环境变化，但用户无法改变</p><p>__DIR__：当前被执行的脚本所在电脑的绝对路径</p><p>__FILE__：当前被执行的脚本所在电脑的绝对路径（带脚本文件的名字）</p><p>__LINE__：当前所属的行数</p><p>__NAMESPACE__：当前所属的命名空间</p><p>__CLASS__：当前所属的类</p><p>__METHOD__：当前所属的方法</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>PHP是一种弱类型语言，变量本身没有数据类型</p><h4 id="数据类型分类"><a href="#数据类型分类" class="headerlink" title="数据类型分类"></a>数据类型分类</h4><h5 id="基本数据类型："><a href="#基本数据类型：" class="headerlink" title="基本数据类型："></a>基本数据类型：</h5><p>整形：int/integer，4字节</p><p>浮点型：float/double，8字节</p><p>字符串型：string，系统根据实际长度分配</p><p>布尔类型：bool/boolean</p><h5 id="复合数据类型："><a href="#复合数据类型：" class="headerlink" title="复合数据类型："></a>复合数据类型：</h5><p>对象类型：object，存放对象</p><p>数组类型：array，存储多个数据（一次性）</p><h5 id="特殊数据类型："><a href="#特殊数据类型：" class="headerlink" title="特殊数据类型："></a>特殊数据类型：</h5><p>资源类型：resource，存放资源数据（PHP外部数据，如数据库）</p><p>空类型：NULL，只有一个值就是NULL（不能运算）</p><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>PHP中有自动转换和强制转换这两种方式转换</p><p>强制转换规则：在变量之前添加一个()，括号中填写需要强制转换的类型</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'a111'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token keyword type-casting">float</span><span class="token punctuation">)</span><span class="token variable">$a</span><span class="token punctuation">;</span>       <span class="token comment">//0    强制转换</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>以字母开头的字符串为0</p><p>以数字开头的字符串，取到有字母为止（不会同时包含两个小数点）</p></blockquote><h4 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h4><p>通过一组类型判断函数，来判断变量</p><p>类型判断函数用法：is_类型(变量名)</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">is_int</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//true</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h4><p>PHP有函数可直接进行转换</p><p>Decbin()：十进制转二进制</p><p>Decoct()：十进制转八进制</p><p>Dechex()：十进制转十六进制</p><p>Bindec()：二进制转十进制</p><h3 id="运算符介绍"><a href="#运算符介绍" class="headerlink" title="运算符介绍"></a>运算符介绍</h3><h4 id="连接运算符"><a href="#连接运算符" class="headerlink" title="连接运算符"></a>连接运算符</h4><p>连接运算是PHP中将多个字符串拼接的一种符号</p><p>. ：将两个字符串连接到一起</p><p>.= ：复合运算，将左边内容与右边内容连接起来，然后重新复制给左边变量</p><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><p>^：按位异或，两个相同则为0，不同则为1</p><p>&lt;&lt;：按位左移，向左移动后，右边补0</p><p>&gt;&gt;：按位右移，向右移动后，左边补上符号位内容（正数补0，负数补1）</p><h3 id="流程控制-分支结构"><a href="#流程控制-分支结构" class="headerlink" title="流程控制-分支结构"></a>流程控制-分支结构</h3><h4 id="if分支"><a href="#if分支" class="headerlink" title="if分支"></a>if分支</h4><p>例：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$day</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'sunday'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$day</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'sunday'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'go out'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'work'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="switch分支"><a href="#switch分支" class="headerlink" title="switch分支"></a>switch分支</h4><p>例：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token variable">$day</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token string single-quoted-string">'sunday'</span><span class="token punctuation">:</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'1'</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string single-quoted-string">'work'</span><span class="token punctuation">:</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'2'</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'error'</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="流程控制-循环结构"><a href="#流程控制-循环结构" class="headerlink" title="流程控制-循环结构"></a>流程控制-循环结构</h3><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p>例：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token variable">$i</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'&lt;br/&gt;'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//循环体</span><span class="token keyword">echo</span> <span class="token variable">$i</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'&lt;br/&gt;'</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">;</span>     <span class="token comment">//循环条件变更</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">{</span><span class="token comment">//循环内容</span><span class="token comment">//内容中要改变循环条件来结束循环</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">&lt;=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些循环的大括号{}在PHP书写到HTML时非常不美观，PHP提供了一种代替机制，使其可以不用书写大括号{}</p><p>左大括号{ 使用冒号:代替</p><p>右大括号} 使用 end+对应的标记替代(例：for循环就是endfor)</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;table border=1&gt;&lt;?php for($i=1;$i&lt;10;$i++):?&gt;&lt;tr&gt;&lt;?php for($j=1;$j&lt;=$i;$j++):?&gt;&lt;td&gt;&lt;?php echo $i . '*' . $j . '=' . $i * $j;?&gt;&lt;td&gt;&lt;?php endfor?&gt;&lt;tr&gt;&lt;?php endfor?&gt;&lt;/table&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><p>文件加载原理：</p><ol><li>在文件加载(include 或者 require)的时候，系统会自动将被包含文件中的代码嵌入到当前文件中</li><li>被包含文件中的代码的嵌入位置就是对应的include位置</li><li>在PHP中被包含的文件是单独进行编译的</li></ol><h4 id="include和include-once的区别"><a href="#include和include-once的区别" class="headerlink" title="include和include_once的区别"></a>include和include_once的区别</h4><p>include：系统编译时碰到一次就会执行一次</p><p>include_once：系统编译时碰到多次，也只会执行一次</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">include</span> <span class="token string single-quoted-string">'index.php'</span><span class="token punctuation">;</span><span class="token keyword">include_once</span> <span class="token string single-quoted-string">'index.php'</span><span class="token punctuation">;</span>     <span class="token comment">//前面该文件已包含，这里不再执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="require和include的区别"><a href="#require和include的区别" class="headerlink" title="require和include的区别"></a>require和include的区别</h4><p>本质都是包含文件，唯一的区别在于包含不到文件的时候，报错的形式不一样</p><p>include 的错误级别比较低，即使包含出错也不会影响下面代码执行</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">include</span> <span class="token string single-quoted-string">'a.php'</span><span class="token punctuation">;</span>        <span class="token comment">//a.php该文件不存在，报错，以下代码继续执行</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'hello'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>require 的错误级别较高，如果包含出错，下面代码就不再执行</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">require</span> <span class="token string single-quoted-string">'a.php'</span><span class="token punctuation">;</span>        <span class="token comment">//a.php该文件不存在，报错，以下代码不执行</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'hello'</span><span class="token punctuation">;</span>           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ol><li><p>函数：函数是一种语法结构，将实现某一个功能的代码块封装到一个结构中，从而实现代码的重复利用</p></li><li><p>函数定义基本语法：</p></li></ol><pre class="line-numbers language-none"><code class="language-none">function 函数名([参数]){//函数体//返回值    return 结果;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>函数命名</p><p>命名规则：由字母、数字和下划线组成，不能以数字开头</p><p>命名规范：</p><p>​    驼峰法：除了左边第一个单词外，后面所有单词首字母都大写</p><p>​    下划线法：单词之间通过下划线连接，单词都是小写</p></li><li><p>函数是在代码执行阶段，碰到函数的时候才会调用，不是在编译阶段。在PHP中函数的调用可以在函数定义之前</p></li></ol><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">game</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//正常调用函数</span><span class="token comment">//定义函数</span><span class="token keyword">function</span> <span class="token function">game</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'hello'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>函数形参的默认值</li></ol><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token variable">$num1</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">$num2</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//形参$num1的默认值为1，执行在add函数内部，不会与外部的$num1变量冲突</span><span class="token keyword">echo</span> <span class="token variable">$num1</span> <span class="token operator">-</span> <span class="token variable">$num2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>注意事项：默认值的定义是放在最后面的，不能左边形参有默认值，但是右边没有</p></blockquote><ol start="6"><li><p>引用传值</p><p>函数在调用时主动去获取外部数据的内存地址，使其可以改变相应内存地址，这种定义形参的方式叫做引用传值</p><p>引用传值基本定义语法：</p><pre class="line-numbers language-none"><code class="language-none">function 函数名(&amp;形参1){          //形参前加&amp;//函数体}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在调用时，必须给引用传值的参数位置传入实际参数，而且参数本身必须是变量，不能是数据本身（变量才有指向数据的内存地址）</p></li><li><p>可变函数</p><p>当有一个变量所保存的值刚好是一个函数的名字，那么就可以使用变量+()的方式来充当函数名使用</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$text</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'game'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">game</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token variable">$text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//调用函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>匿名函数</p><p>没有名字的函数</p><p>基本定义语法：</p><pre class="line-numbers language-none"><code class="language-none">变量名 = function(){//函数体};  //注意要加;号结束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>调用函数即调用变量</p></li></ol><h3 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h3><ol><li><p>全局变量</p><p>用户普通定义的变量，在函数外部定义</p></li><li><p>局部变量</p><p>在函数内部定义的变量，在PHP中只允许函数内部使用，函数运行结束后所有局部变量都会清空</p></li><li><p>超全局变量</p><p>系统定义的变量，函数内外都可访问</p></li><li><p>静态变量</p><p>在函数内部定义的变量，使用static关键字修饰，用来实现跨函数共享数据的变量（函数运行结束后，静态变量的内存地址不被清空）</p></li></ol><h3 id="常用系统函数"><a href="#常用系统函数" class="headerlink" title="常用系统函数"></a>常用系统函数</h3><ol><li><p>输出函数</p><p>print()：类似于echo输出提供的内容，本身是一种结构（不是函数），返回1，可以不需要使用括号</p><p>print_r()：类似于 var_dump，但不会输出数据的类型，只会输出值</p></li><li><p>时间函数</p><p>data()：按照指定格式输出对应当前时间戳</p><p>time()：以指定格式输出当前时间</p><p>microtime()：获取微秒级别的时间（通常可以用来程序测试）</p></li><li><p>数学函数</p><p>max()：比较两个数中较大的值(可传入数组，返回数组中最大的值)</p><p>min()：比较两个数中较小的值</p><p>rand()：得到一个随机数，指定区间的随机整数</p><p>mt_rand()：与rand一样，只是底层结构不同，效率比rand高（建议使用）</p><p>round()：四舍五入</p><p>ceil()：向上取整</p><p>floor()：向下取整</p><p>pow()：求指定值次方的结果</p><p>abs()：求绝对值</p><p>sqrt()：求平方根</p></li><li><p>有关函数的函数</p><p>function_exists()：判断指定的函数名是否在内存中存在</p><p>function_arg()：在自定义函数中去获取指定数值(下标) 对应的参数</p><p>function_args()：在自定义函数中获取所有的参数（数组）</p><p>function_num_args()：获取当前自定义函数的传入实参的数量</p></li></ol><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="字符串定义语法"><a href="#字符串定义语法" class="headerlink" title="字符串定义语法"></a>字符串定义语法</h4><ol><li><p>单引号字符串</p></li><li><p>双引号字符串</p></li><li><p>nowdoc 字符串</p><p>定义方式：</p><pre class="line-numbers language-none"><code class="language-none">$str = &lt;&lt;&lt;'边界符'字符串内容边界符;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>heredoc 字符串</p><p>定义方式：</p><pre class="line-numbers language-none"><code class="language-none">$str = &lt;&lt;&lt;边界符字符串内容边界符;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><p>结构化定义字符串变量的规则：</p><ul><li>上边界符后面不能跟任何内容</li><li>下边界符必须定格在最左边</li><li>下边界符后面只能跟分号，不能跟任何内容</li></ul><h4 id="字符串转义"><a href="#字符串转义" class="headerlink" title="字符串转义"></a>字符串转义</h4><p>转义的含义：在计算机通用协议中，有一些特定的方式定义的字母，系统会特殊处理，通常这种方式都是使用反斜杠+字母的特性</p><p>PHP在识别转义字符时就是使用反斜杠+字母的方式</p><p>在单引号和双引号中进行转义的区别：</p><ol><li><p>单引号中只能够识别\‘，而双引号中不能识别\‘但其余都能够识别</p></li><li><p>双引号中能够识别$符号，因此双引号中可以解析变量，而单引号不可以</p><blockquote><p>双引号中变量识别的规则</p><ul><li><p>变量本身就能够与后面的内容区分，这种方式要保证变量的独立性</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'hello'</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"abcd <span class="token interpolation"><span class="token variable">$a</span></span> efg"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>使用变量专业标识符(区分)，给变量加上一组大括号{}</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'hello'</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"abcd<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$a</span><span class="token punctuation">}</span></span>efg"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></blockquote></li></ol><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="数组定义语法"><a href="#数组定义语法" class="headerlink" title="数组定义语法"></a>数组定义语法</h4><p>在PHP中系统提供多种定义数组的方式：</p><ol><li><p>使用array关键字</p><pre class="line-numbers language-none"><code class="language-none">$变量 = array(元素1,元素2,元素3);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用中括号来包裹数据</p><pre class="line-numbers language-none"><code class="language-none">$变量 = [元素1,元素2,元素3]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>隐形定义数组</p><pre class="line-numbers language-none"><code class="language-none">$变量[] = 值1;        //若不提供下标，系统会自动生成$变量[下标] = 值;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="PHP数组特点"><a href="#PHP数组特点" class="headerlink" title="PHP数组特点"></a>PHP数组特点</h4><ul><li><p>可以整数下标或字符串下标</p><p>如果数组下标都为整数：索引数组</p><p>如果数组下标都为字符串：关联数组</p><p>不同下标可以混合存在：混合数组</p></li><li><p>数组元素的顺序以放入顺序为准，与下标无关</p></li><li><p>数字下标自增长特性：从0开始自动增长，如果中间手动出现较大的，那么后面的自增长元素从最大的值+1开始</p></li><li><p>特殊下标的自动转换</p><p>布尔值：true和false分别转换为1和0</p><p>空：NULL转换为空字符串””</p></li><li><p>PHP中数组元素没有类型限制</p></li><li><p>PHP中数组没有长度限制</p><p>PS：PHP中的数组存储位置是堆区，为当前数组分配一块连续的内存</p></li></ul><h4 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h4><p>foreach循环遍历</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//索引数组遍历</span><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$arr</span> <span class="token keyword">as</span> <span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token variable">$v</span><span class="token punctuation">}</span><span class="token comment">//关联数组遍历</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$arr</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=&gt;</span> <span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//=&gt;表示的是key和value的关系</span><span class="token keyword">echo</span> <span class="token variable">$k</span><span class="token punctuation">,</span><span class="token variable">$v</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'&lt;br/&gt;'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>for循环遍历</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token variable">$len</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment">//优化，每次循环不用再执行count($arr)</span><span class="token keyword">echo</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>制作个人图片api接口</title>
      <link href="2021/04/11/zhi-zuo-ge-ren-tu-pian-api-jie-kou/"/>
      <url>2021/04/11/zhi-zuo-ge-ren-tu-pian-api-jie-kou/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>当我们需要在网站上显示随机图片时，会用到api接口，这时可以自己做一个图片api接口，就不用担心使用别人的api接口不稳定或对图片不满意等情况了<br><strong>本篇文章是基于jsDeliver + github制作图片api接口</strong></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li>一台配置好域名＆证书的服务器</li><li>服务器安装好基本的lnmp环境，需要php-fpm，新版php已集成（这里mysql用不上）</li><li>一个github账号（需要科学上网）<h1 id="过程介绍"><a href="#过程介绍" class="headerlink" title="过程介绍"></a>过程介绍</h1></li><li>上传图片到github仓库中</li><li>在github中进行项目的发布</li><li>编写php文件，引用jsDeliver上的文件</li><li>将php文件上传到服务器中</li><li>在nginx配置文件中配置好php-fpm相关配置<h1 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h1><h2 id="上传图片到github仓库中"><a href="#上传图片到github仓库中" class="headerlink" title="上传图片到github仓库中"></a>上传图片到github仓库中</h2>在本地建一个放图片的文件夹，<strong>图片需为jpg格式，名称用数字排好序，注意该勾的勾上</strong><br><img src="https://img-blog.csdnimg.cn/20210222220524604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDAwOTcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><p>下载<a href="https://desktop.github.com/">GitHub Desktop</a>，登录账号<br>在GitHub Desktop中克隆自己已存在的仓库（<strong>要有README.md文件，仓库是公开的</strong>）<br>ps:可以专门弄一个放图片的仓库<br><img src="https://img-blog.csdnimg.cn/2021022222054262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDAwOTcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择已有的库，选择本地需要克隆的路径<br><img src="https://img-blog.csdnimg.cn/20210223001926374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDAwOTcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>没有仓库就新建一个，该勾的勾上<br><img src="https://img-blog.csdnimg.cn/202102222206446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDAwOTcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210222220655348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDAwOTcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>同步操作</strong><br>①写好说明②提交③更新到github<br><img src="https://img-blog.csdnimg.cn/20210222221804499.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDAwOTcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>如果是在GitHub Desktop上新创建的仓库，第三步会有一个提示框，注意把勾去掉，那勾相当于代码私密，我们需要公开代码<br><img src="https://img-blog.csdnimg.cn/20210222221815872.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDAwOTcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="在github中进行项目的发布"><a href="#在github中进行项目的发布" class="headerlink" title="在github中进行项目的发布"></a>在github中进行项目的发布</h2><p>仓库管理中点击release<br><img src="https://img-blog.csdnimg.cn/20210222222518647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDAwOTcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>①填写版本号②描述说明③发布<br><img src="https://img-blog.csdnimg.cn/20210222222518646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDAwOTcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>到这里就可以引用资源了</p><blockquote><p><a href="https://cdn.jsdelivr.net/gh/%E4%BD%A0%E7%9A%84github%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BD%A0%E7%9A%84%E4%BB%93%E5%BA%93%E5%90%8D@%E5%8F%91%E5%B8%83%E7%9A%84%E7%89%88%E6%9C%AC%E5%8F%B7/%E6%96%87%E4%BB%B6%E5%90%8D">https://cdn.jsdelivr.net/gh/你的github用户名/你的仓库名@发布的版本号/文件名</a><br>例:<a href="https://cdn.jsdelivr.net/gh/bananaYH/images@0.33/img/2.jpg">https://cdn.jsdelivr.net/gh/bananaYH/images@0.33/img/2.jpg</a></p></blockquote><blockquote><p>不加版本号等同于默认访问<a href="https://cdn.jsdelivr.net/gh/bananaYH/images@master/img/2.jpg">https://cdn.jsdelivr.net/gh/bananaYH/images@master/img/2.jpg</a><br>现github默认分支名是main，若要不加@版本号访问则将main重命名为master<br>不加@，好像jsDeliver那边不能及时更新过来，<strong>建议还是加上@，能够及时更新</strong></p></blockquote><h2 id="编写php文件，引用jsDeliver上的文件"><a href="#编写php文件，引用jsDeliver上的文件" class="headerlink" title="编写php文件，引用jsDeliver上的文件"></a>编写php文件，引用jsDeliver上的文件</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">?</span>php$rand <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$url <span class="token operator">=</span> <span class="token string">'https://cdn.jsdelivr.net/gh/bananaYH/images@0.33/img/'</span><span class="token punctuation">.</span>$rand<span class="token punctuation">.</span><span class="token string">'.jpg'</span><span class="token punctuation">;</span>$img <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span>$url<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Type: image/jpeg;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>echo $img<span class="token punctuation">;</span><span class="token operator">?</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>rang随机产生数字，按图片编号填写<br>填写好url</p></blockquote><p>编辑好，用FTP上传该php文件到域名根目录下</p><h2 id="在nginx配置文件中配置好php-fpm相关配置"><a href="#在nginx配置文件中配置好php-fpm相关配置" class="headerlink" title="在nginx配置文件中配置好php-fpm相关配置"></a>在nginx配置文件中配置好php-fpm相关配置</h2><p>编辑nginx.conf文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">vim <span class="token operator">/</span>www<span class="token operator">/</span>server<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token operator">/</span>nginx<span class="token punctuation">.</span>conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在配置了443和ssl的server中加上以下代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">location <span class="token operator">~</span> \<span class="token punctuation">.</span>php$ <span class="token punctuation">{</span>        root           <span class="token operator">/</span>www<span class="token operator">/</span>wwwroot<span class="token punctuation">;</span>        fastcgi_pass   unix<span class="token operator">:</span><span class="token operator">/</span>tmp<span class="token operator">/</span>php<span class="token operator">-</span>cgi<span class="token operator">-</span><span class="token number">74.</span>sock<span class="token punctuation">;</span>        fastcgi_index  index<span class="token punctuation">.</span>php<span class="token punctuation">;</span>        fastcgi_param  <span class="token constant">SCRIPT_FILENAME</span>  <span class="token operator">/</span>www<span class="token operator">/</span>wwwroot$fastcgi_script_name<span class="token punctuation">;</span>        include        fastcgi_params<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>root 指定php的根目录，自行更改<br>fastcgi_pass 监听端口（两种形式tcp:127.0.0.1:9000或unix）tcp注意要开防火墙，下面详细解释<br>fastcgi_indexnginx 默认首页文件<br>fastcgi_param 脚本文件请求的路径，更改/www/wwwroot为根目录路径<br>include 引入fastcgi的配置文件</p></blockquote><p>参考<br><img src="https://img-blog.csdnimg.cn/20210222234143670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDAwOTcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>使用unix</strong><br>查看php-fpm.conf文件，不知道在哪输查找命令</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">find <span class="token operator">/</span> <span class="token operator">-</span>name php<span class="token operator">-</span>fpm<span class="token punctuation">.</span>conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210222234625809.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDAwOTcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>将.sock的路径复制到nginx.conf中的fastcgi_pass即可</p><p><strong>使用tcp方式</strong><br>在php-fpm.conf中将.sock路径更改为127.0.0.1:9000即可</p><p><strong>注意事项！！！</strong><br>php-fpm.conf和nginx.conf文件中的user是一致的，不一致会出现权限问题<br>当两边user不为root时，根目录最好不要再/root下面，会有权限问题</p><p>重启Nginx服务</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">service nginx restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="测试php配置"><a href="#测试php配置" class="headerlink" title="测试php配置"></a>测试php配置</h2><p>创建编辑index.php文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">?</span>php     <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">?</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将index.php文件放到网页根目录下</p><blockquote><p>https://域名/index.php 访问</p></blockquote><p>出现php页面即为nginx配置php成功<br><img src="https://img-blog.csdnimg.cn/20210223000051768.png" alt="在这里插入图片描述"></p><h2 id="测试图片api接口"><a href="#测试图片api接口" class="headerlink" title="测试图片api接口"></a>测试图片api接口</h2><p>访问并运行php文件，这里假设php文件名为images.php</p><blockquote><p>https://域名/images.php</p></blockquote><p>正常情况是和引用jsDeliver的资源一样，会显示一张图片<br><img src="https://img-blog.csdnimg.cn/20210223000835944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDAwOTcw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 搭建博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零部署halo博客</title>
      <link href="2021/04/11/cong-ling-bu-shu-halo-bo-ke/"/>
      <url>2021/04/11/cong-ling-bu-shu-halo-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="从零部署halo博客"><a href="#从零部署halo博客" class="headerlink" title="从零部署halo博客"></a>从零部署halo博客</h1><p>此教程是使用宝塔+docker+mysql搭建个人博客，使用H2可上<a href="https://docs.halo.run/">halo官网教程</a>查阅</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>一台云服务器 </li><li>一个域名（国内服务器需要备案，备案要很久，最好提前）</li><li>域名实名，申请SSL证书</li><li>域名解析</li></ul><h2 id="安装宝塔面板"><a href="#安装宝塔面板" class="headerlink" title="安装宝塔面板"></a>安装宝塔面板</h2><p><strong>安装前注意系统必须为没装过其它环境如Apache/Nginx/php/MySQL的新系统</strong>，以下使用centos系统安装宝塔面板</p><ul><li>执行安装命令<pre class="line-numbers language-none"><code class="language-none">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>安装成功后会给你面板地址和管理员账号和密码，注意要在服务器后台安全组或是防火墙中打开8888端口</p></blockquote></li></ul><blockquote><p>面板登录进去后会让你一键部署环境(LNMP或LAMP，推荐LNMP)<br>安装方式编译安装比极速安装更加稳定，但安装时间需要1到2小时，极速安装10多分钟，时间充裕推荐编译安装</p><ul><li>halo官方要求mysql数据库需要5.7+，8.0需要6RAM以上，推荐就5.7。php和phpmyadmin选最新,其他随意</li></ul></blockquote><blockquote><p>这里我进行编译安装时面板卡死了一次，任务列表是空的，服务器满载，cpu使用率低，重登也是特别卡和慢,这时候就别等了，这里我重启服务器后，问题解决，编译安装正常继续运行</p></blockquote><h2 id="安装Docker管理器"><a href="#安装Docker管理器" class="headerlink" title="安装Docker管理器"></a>安装Docker管理器</h2><ul><li>在宝塔面板的软件商店中直接安装即可</li></ul><h2 id="下载并修改halo配置文件"><a href="#下载并修改halo配置文件" class="headerlink" title="下载并修改halo配置文件"></a>下载并修改halo配置文件</h2><ul><li>创建并进入工作目录<pre class="line-numbers language-none"><code class="language-none">mkdir ~/.halo || cd ~/.halo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>下载示例配置文件到工作目录<pre class="line-numbers language-none"><code class="language-none">wget https://dl.halo.run/config/application-template.yaml -O ./application.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>根据需要编辑配置文件，配置数据库或者端口等<pre class="line-numbers language-none"><code class="language-none">vim application.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>使用mysql<strong>本地数据库</strong>的配置图<br><img src="https://img-blog.csdnimg.cn/20210212231836265.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDAwOTcw,size_16,color_FFFFFF,t_70" alt="application.yaml配置图"><blockquote><ul><li>默认是使用的H2数据库</li><li>使用mysql数据库则将H2配置打上注释，将mysql配置注释放开</li><li>修改username和password为mysql的账号和密码，密码在宝塔数据库界面可查看</li><li><strong>若在容器中使用数据库，则需要将127.0.0.1换成数据库的容器名，端口为容器内部端口 例：将127.0.0.1:3306换成blog_mysql:3306</strong></li><li>以下根据个人需求配置：<br>port为halo博客运行的端口<br>admin-path为后台管理的根路径<br>cache是设置缓存数据的保存方式<br>compression设置是否开启压缩，用Nginx等反向代理服务器时通常会默认开启</li></ul></blockquote></li></ul><p><strong>下面根据个人 选择一种进行配置</strong></p><h3 id="①直接使用本地数据库"><a href="#①直接使用本地数据库" class="headerlink" title="①直接使用本地数据库"></a>①直接使用本地数据库</h3><ul><li><p>进入msyql</p><pre class="line-numbers language-none"><code class="language-none">mysql -u root -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建halodb数据库</p><pre class="line-numbers language-none"><code class="language-none">create database halodb character set utf8mb4 collate utf8mb4_bin;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意这里官方要求字符集为utf8mb4,排序规则为utf8mb4_bin</p></blockquote></li><li><p>拉取最新的 Halo 镜像</p><pre class="line-numbers language-none"><code class="language-none">docker pull halohub/halo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>从 1.4.3 开始，Docker 镜像已经转移到 halohub 组织，不再是 ruibaby/halo</p></blockquote></li><li><p>创建halo容器并使用本地数据库</p><pre class="line-numbers language-none"><code class="language-none">docker run -itd --net host --name halo -p 8090:8090 -v ~/.halo:/root/.halo --restart=always halohub/halo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>参数说明：</p><ul><li><strong>-i</strong>， 即使没有连接，也要保持标准输入保持打开状态，一般与 -t 连用</li><li><strong>-t</strong>， 分配一个伪tty，一般与 -i 连用</li><li><strong>-d</strong>，在后台运行容器，并且打印容器id</li><li><strong>- -name</strong>，容器名</li><li><strong>- -net</strong>，指定容器的网络配置  <blockquote><p> <strong>- -net=bridge</strong> 这个是默认值，连接到默认的网桥。<br> <strong>- -net=host</strong> 容器使用本地主机的网络，它拥有完全的本地主机接口访问权限<br> <strong>- -net=container:NAME_or_ID</strong> 让Docker使用其他容器的网路，共享IP和PORT等网络资源，两者进程可以直接通过 lo 环回接口通信<br> <strong>- -net=none</strong> 容器使用自己的网络，但是不进行网络配置，之后用户可以自行配置</p></blockquote></li><li><strong>-p</strong>， 容器内部端口绑定到指定的主机端口，主机端口：容器端口</li><li><strong>-v</strong>，  挂载目录，这里是将主机的目录~/.halo挂载到容器的目录/root/.halo上</li><li><strong>- -restart=always</strong>，当docker重启时，容器自动启动</li></ul></blockquote></li></ul><blockquote><p>docker默认的网络模式是bridge，因此默认容器内无法访问本地127.0.0.1</p></blockquote><h3 id="②利用容器间的关联使用容器中的数据库"><a href="#②利用容器间的关联使用容器中的数据库" class="headerlink" title="②利用容器间的关联使用容器中的数据库"></a>②利用容器间的关联使用容器中的数据库</h3><ul><li><p>拉取mysql5.7镜像</p><pre class="line-numbers language-none"><code class="language-none">docker pull mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建并启动mysql容器</p><pre class="line-numbers language-none"><code class="language-none">docker run --name blog_mysql -p 3307:3306 -e MYSQL_ROOT_PASSWORD=****** -d mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li><strong>- -name</strong>，容器名</li><li><strong>-e</strong> 设置环境变量，MYSQL_ROOT_PASSWORD为数据库密码，自行修改，用户名默认root</li><li>这里因为我主机已有mysql，所以映射端口到3307，这个自行决定</li></ul></blockquote></li><li><p>进入容器</p><pre class="line-numbers language-none"><code class="language-none">docker exec -it blog_mysql /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>进入mysql并创建halo必要数据库halodb，注意字符集和排序规则</p><pre class="line-numbers language-none"><code class="language-none">mysql -u root -pcreate database halodb character set utf8mb4 collate utf8mb4_bin;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>拉取最新的 Halo 镜像</p><pre class="line-numbers language-none"><code class="language-none">docker pull halohub/halo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建halo容器并使其关联数据库容器</p><pre class="line-numbers language-none"><code class="language-none">docker run -itd --name halo --link blog_mysql -p 8090:8090 -v ~/.halo:/root/.halo --restart=always halohub/halo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>参数说明：</p><ul><li><strong>-i</strong>， 即使没有连接，也要保持标准输入保持打开状态，一般与 -t 连用</li><li><strong>-t</strong>， 分配一个伪tty，一般与 -i 连用</li><li><strong>-d</strong>，在后台运行容器，并且打印容器id   </li><li><strong>- -name</strong>，容器名</li><li><strong>- -link</strong>，指定容器间的关联</li><li><strong>-p</strong>， 容器内部端口绑定到指定的主机端口，主机端口：容器端口</li><li><strong>-v</strong>，  挂载目录，这里是将主机的目录~/.halo挂载到容器的目录/root/.halo上</li><li><strong>- -restart=always</strong>，当docker重启时，容器自动启动</li></ul></blockquote></li></ul><p><strong>PS:如果要使用外部数据库管理工具远程管理mysql，则需要用户开启远程登录功能</strong></p><pre class="line-numbers language-none"><code class="language-none">Grant all privileges on *.* to 'root'@'%' identified by ‘password’with grant option;flush privileges;      刷新权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>*. * 为 数据库.表 ，root为用户，%代表所有主机  ，password处填写用户密码</p></blockquote><h2 id="以下为注意事项！！！"><a href="#以下为注意事项！！！" class="headerlink" title="以下为注意事项！！！"></a><strong>以下为注意事项！！！</strong></h2><p><strong>创建并启动halo容器后，会有20s左右的初始化建表时间，初始化后在数据库halodb当中能看见自动创建的表，若没有表，请检查问题</strong><br>Halo工作目录的绝对路径为 ~/.halo，这个工作目录是固定的，Halo容器运行后里面通常包含下列目录或文件：<br>db：存放 H2 Database 的物理文件，如果您使用 MySQL 数据库，那么不会存在这个目录<br>templates/themes：里面包含用户所下载的主题<br>static：相当于网站的根目录<br>logs：运行日志目录<br>application.yaml：配置文件</p><p><strong>放行端口80 443 8090！！！</strong><br><strong>云服务器防火墙和宝塔的防火墙两边都要放行！！！</strong></p><p><strong>到这里我们就可以以<a href="http://ip:8090的方式访问halo安装程序了">http://ip:8090的方式访问halo安装程序了</a></strong><br>可以先配置好域名访问和SSL再进行安装</p><h2 id="配置域名访问、SSL，使用-Nginx-进行反向代理"><a href="#配置域名访问、SSL，使用-Nginx-进行反向代理" class="headerlink" title="配置域名访问、SSL，使用 Nginx 进行反向代理"></a>配置域名访问、SSL，使用 Nginx 进行反向代理</h2><ul><li>安装 Nginx<br>之前安装LNMP时已安装</li><li>编辑配置文件<blockquote><p>官方是下载模板再进行配置，这里使用全局</p></blockquote><pre class="line-numbers language-none"><code class="language-none">vim /www/server/nginx/conf/nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>在http的括号内加入以下代码:<pre class="line-numbers language-none"><code class="language-none">server {    listen 80;    server_name baidu.com www.baidu.com; #域名    rewrite ^(.*)$ https://$host$1 permanent;     client_max_body_size 1024m;}server {    listen 443 ssl;     server_name baidu.com www.baidu.com; #域名     ssl_certificate /usr/local/xxxxxx.pem; #证书地址    ssl_certificate_key /usr/local/xxxxxxx.key; #证书地址    ssl_session_timeout 5m;    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;    ssl_prefer_server_ciphers on;     location / {        proxy_set_header HOST $host;        proxy_set_header X-Forwarded-Proto $scheme;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;         proxy_pass http://127.0.0.1:8090/; #halo进入端口    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>修改域名</li><li>用ftp将证书文件放到云服务器中，配置好证书地址，第一个证书后缀不一定是pem</li><li>rewrite ^(.*)$ https://$host$1 permanent;是强制跳转http到https</li></ul></blockquote></li><li>修改后需要重载Nginx<pre class="line-numbers language-none"><code class="language-none">在宝塔中重启Nginx    或    nginx -s reload    <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><strong>到这里，就可以使用域名访问网站了！！！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 搭建博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> LNMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/04/10/hello-world/"/>
      <url>2021/04/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
